"""
quantum_utilities.py

‡∏ä‡∏∏‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÄ‡∏ä‡∏¥‡∏á‡∏Ñ‡∏ß‡∏≠‡∏ô‡∏ï‡∏±‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
- Quantum Believability Score (QBS)
- ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Quantum Paradox
- Mutual Information & Entanglement Graph
- Entropy Test ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°

‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤: Apichet & Quantum Mechanics GPT
"""

import pandas as pd
import numpy as np
import networkx as nx
import random
from typing import List, Tuple, Dict
from numpy import log2
from sklearn.metrics import mutual_info_score
from sklearn.preprocessing import KBinsDiscretizer
from scipy.stats import entropy

__all__ = [
    "rank_draws_with_qbs",
    "detect_paradox",
    "compute_mutual_information",
    "build_entanglement_graph",
    "calculate_draw_entropy",
    "entropy_test_vs_random",
    "find_shadow_draws"
]

# ------------------------------
# üîó Quantum Believability Score
# ------------------------------

def rank_draws_with_qbs(
    df_multiverse: pd.DataFrame,
    entangled_list: List[str],
    entropy_threshold: float = 6.0
) -> pd.DataFrame:
    """
    ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Quantum Believability Score (QBS) ‡πÉ‡∏´‡πâ draw ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£

    QBS = (frequency / log2(1 + entropy)) * entangle_boost / (1 + paradox_penalty)
    """
    scores = []
    counts = df_multiverse["collapsed"].value_counts()
    entropies = df_multiverse.groupby("collapsed")["entropy"].mean()

    for draw in counts.index:
        freq = counts[draw]
        entropy_val = entropies[draw]

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö paradox
        paradox_score = 0
        if entropy_val > entropy_threshold and freq >= 3:
            paradox_score += 1
        if draw in entangled_list and draw not in df_multiverse["collapsed"].values:
            paradox_score += 2

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì QBS
        entangle_boost = 1.5 if draw in entangled_list else 1.0
        entropy_factor = log2(1 + entropy_val)
        qbs = (freq / entropy_factor) * entangle_boost / (1 + paradox_score)

        scores.append({
            "draw": draw,
            "frequency": freq,
            "avg_entropy": round(entropy_val, 5),
            "entangled": draw in entangled_list,
            "paradox_score": paradox_score,
            "QBS": round(qbs, 5)
        })

    return pd.DataFrame(scores).sort_values(by="QBS", ascending=False).reset_index(drop=True)


# ------------------------------
# üåÄ Quantum Paradox Detector
# ------------------------------

def detect_paradox(
    df_multiverse: pd.DataFrame,
    entangled_list: List[str],
    frequency_threshold: int = 1,
    entropy_threshold: float = 8.5
) -> List[Tuple[str, str]]:
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö draw ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≠‡∏ô‡∏ï‡∏±‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á:
    - ‡∏û‡∏±‡∏ß‡∏û‡∏±‡∏ô‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏õ‡∏£‡∏≤‡∏Å‡∏è
    - ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏ö‡πà‡∏≠‡∏¢‡πÅ‡∏ï‡πà entropy ‡∏™‡∏π‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
    """
    paradoxes = []

    freq_map = df_multiverse["collapsed"].value_counts().to_dict()
    entropy_map = df_multiverse.groupby("collapsed")["entropy"].mean().to_dict()

    for draw in entangled_list:
        freq = freq_map.get(draw, 0)
        entropy_val = entropy_map.get(draw, None)

        if freq == 0:
            paradoxes.append((draw, "üåÄ Entangled but never appeared in multiverse"))
        elif freq >= frequency_threshold and entropy_val is not None and entropy_val >= entropy_threshold:
            paradoxes.append((draw, f"‚ö†Ô∏è High frequency ({freq}) but high entropy ({entropy_val:.2f})"))

    return paradoxes


# ------------------------------
# üìä Entanglement Analyzer
# ------------------------------

def compute_mutual_information(draw_matrix: np.ndarray, n_bins: int = 10) -> np.ndarray:
    """
    ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Mutual Information ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á draw ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏π‡πà (‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡πÅ‡∏ô‡∏Å)

    Args:
        draw_matrix: ‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á [n_draws x features]
        n_bins: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô bin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö discretization

    Returns:
        mutual_info_matrix: ‡πÄ‡∏°‡∏ó‡∏£‡∏¥‡∏Å‡∏ã‡πå mutual information ‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏°‡∏≤‡∏ï‡∏£ [n x n]
    """
    n = draw_matrix.shape[0]
    mi_matrix = np.zeros((n, n))

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô discrete labels
    est = KBinsDiscretizer(n_bins=n_bins, encode='ordinal', strategy='uniform')
    discretized = est.fit_transform(draw_matrix)

    for i in range(n):
        for j in range(i, n):
            mi = mutual_info_score(discretized[i], discretized[j])
            mi_matrix[i, j] = mi_matrix[j, i] = mi

    return mi_matrix


def build_entanglement_graph(mi_matrix: np.ndarray, threshold: float = 0.05) -> nx.Graph:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏û‡∏±‡∏ß‡∏û‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ mutual information ‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å edge
    """
    n = mi_matrix.shape[0]
    G = nx.Graph()

    for i in range(n):
        G.add_node(i)

    for i in range(n):
        for j in range(i + 1, n):
            if mi_matrix[i, j] > threshold:
                G.add_edge(i, j, weight=mi_matrix[i, j])

    return G


# ------------------------------
# üîê Entropy Analyzer
# ------------------------------

def calculate_draw_entropy(draw: np.ndarray) -> float:
    """
    ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Shannon entropy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö draw ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    """
    values, counts = np.unique(draw, return_counts=True)
    probs = counts / len(draw)
    return entropy(probs, base=2)


def entropy_test_vs_random(draws_real: List[np.ndarray], num_sim: int = 1000) -> Dict[str, float]:
    """
    ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö entropy ‡∏Ç‡∏≠‡∏á draw ‡∏à‡∏£‡∏¥‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∏‡∏î‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á

    Returns:
        dict: {
            'real_entropy': ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ entropy ‡∏à‡∏£‡∏¥‡∏á,
            'simulated_entropy': ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ entropy ‡∏à‡∏≤‡∏Å‡∏™‡∏∏‡πà‡∏°,
            'difference': ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á
        }
    """
    real_entropies = [calculate_draw_entropy(draw) for draw in draws_real]
    simulated_entropies = []

    for _ in range(num_sim):
        sim_draws = [np.random.randint(0, 10, len(draw)) for draw in draws_real]
        sim_ent = [calculate_draw_entropy(draw) for draw in sim_draws]
        simulated_entropies.append(np.mean(sim_ent))

    return {
        'real_entropy': round(np.mean(real_entropies), 5),
        'simulated_entropy': round(np.mean(simulated_entropies), 5),
        'difference': round(np.mean(real_entropies) - np.mean(simulated_entropies), 5)
    }




def find_shadow_draws(entangled_set, multiverse_df):
    collapsed_set = set(multiverse_df["collapsed"])
    return [draw for draw in entangled_set if draw not in collapsed_set]
